import Immutable from 'immutable'
import { CharacterMetadata, ContentBlock, ContentState, EditorState } from 'draft-js'
// BlockMap -> ContentState -> EditorState

// ['BOLD', 'ITALIC'] to OrderedSet
function generateStyle(styleArray) {
  function getKeys(arr) {
    const obj = {}
    for (let i = 0; i < arr.length; i++) {
      if (arr[i]) {
        obj[arr[i]] = null
      }
    }
    return obj
  }
  return Immutable.OrderedSet.fromKeys(getKeys(styleArray))
}

// style is generated by generateStyle
// entity: string
function generateCharacterMetaData(style, entity) {
  const config = {
    style,
    entity,
  }
  return CharacterMetadata.create(config)
}

// metadataArray: CharacterMetaData[]
function generateCharacterList(metaDataArray) {
  return Immutable.fromJS(metaDataArray)
}

// type: 'header-one'
// text: '123'
// characterList: Immutable.List<characterMetaData>
function generateContentBlock(key, type, text, characterList) {
  return new ContentBlock({
    key,
    type,
    text,
    characterList,
  })
}

// blocks: ContentBlock[]
function generateContentState(blocks) {
  return ContentState.createFromBlockArray(blocks)
}

function generateEditorState(plainContentState) {
  const contentBlocks = []
  for (const key in plainContentState.blockMap) {
    const { text, type } = plainContentState.blockMap[key]
    const plainCharacterList = plainContentState.blockMap[key].characterList

    const metaDataArray = plainCharacterList.map((item) => {
      const styleArr = item.style
      const style = generateStyle(styleArr)
      const characterMetaData = generateCharacterMetaData(style, item.entity)
      return characterMetaData
    })

    const characterList = generateCharacterList(metaDataArray)
    const contentBlock = generateContentBlock(key, type, text, characterList)
    contentBlocks.push(contentBlock)
  }
  const contentState = generateContentState(contentBlocks)
  return EditorState.createWithContent(contentState)
}

export default generateEditorState
